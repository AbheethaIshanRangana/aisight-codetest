name: Application CI/CD

on: 
  push:
    branches:
      - dev
      - main
    paths:
      - 'application/**'
      - '!application/README.md'
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      directory:
        description: "Set repo directory"
        required: true
        default: 'application'
        type: choice
        options:
          - application
          - infrastructure

jobs:

  Application-Unit-Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Check Python version 
        run: |
          python3 --version
          pip --version
      - name: Execute test case 
        run: |
          pip install -r $GITHUB_WORKSPACE/application/requirements.txt
          python3 $GITHUB_WORKSPACE/application/test_app.py

  Python-Static-Analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Check Python version 
        run: |
          python3 --version
          pip --version
      - name: Pylint 
        run: |
          python3 -m pip install pylint
          pylint $GITHUB_WORKSPACE/application/*.py
        continue-on-error: true
      - name: Prospector
        run: | 
          python3 -m pip install prospector
          cd $GITHUB_WORKSPACE/application/ && prospector
        continue-on-error: true
      - name: Bandit 
        run: |
          python3 -m pip install bandit
          cd $GITHUB_WORKSPACE/application/ && bandit -r .
        continue-on-error: true

  Docker:
    runs-on: ubuntu-latest
    env: 
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKER_IMAGE_NAME: "flaskapp"
    #outputs:
    #  image-tag: ${{ steps.set-tag.outputs.IMAGE_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Generate image tag
        id: set-tag 
        run: |
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          echo "IMAGE_ID=${sha}-${ts}" >> $GITHUB_ENV
      - name: Dockerfile Lint(Hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with: 
          dockerfile: application/Dockerfile
        continue-on-error: true
      - name: Build a Docker image for Snyk testing
        run: | 
          cd application/ 
          docker build -t $DOCKER_IMAGE_NAME:latest .
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: flaskapp:latest
          args: --file=$GITHUB_WORKSPACE/application/Dockerfile
      #- name: Login to Docker Hub 
      # uses: docker/login-action@v2
      #  with: 
      #    username: ${{ env.DOCKER_USERNAME }}
      #    password: ${{ env.DOCKER_PASSWORD }}
      - name: Build Docker image to deploy
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: $GITHUB_WORKSPACE/application/
          push: true
          #tags: ${{ env.DOCKER_USERNAME }}/$DOCKER_IMAGE_NAME:${{ steps.git_commit_hash.outputs.hash }}
          #tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set-tag.outputs.image-tag }}
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_ID }}
      - name: Push Docker image to DockerHub
      #  if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          #docker push $DOCKER_USERNAME/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set-tag.outputs.image-tag }}
          docker push $DOCKER_USERNAME/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_ID }}