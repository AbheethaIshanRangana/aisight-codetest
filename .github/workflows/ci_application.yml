name: Application CI/CD

on: 
  push:
    branches:
      - dev
      - main
    paths:
      - 'application/**'
      - '!application/README.md'
  pull_request:
    branches:
      - dev
      - main
  workflow_dispatch:
    inputs:
      directory:
        description: "Set repo directory"
        required: true
        default: 'application'
        type: choice
        options:
          - application
          - infrastructure

env:
  DOCKER_IMAGE_NAME: "flaskapp"
  ECS_SERVICE: "flask"
  ECS_CLUSTER: "flaskecscluster"

jobs:

  Application-Unit-Testing:
    name: Application Unit Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Check Python version 
        run: |
          python3 --version
          pip --version
      - name: Execute test case 
        run: |
          pip install -r $GITHUB_WORKSPACE/application/requirements.txt
          python3 $GITHUB_WORKSPACE/application/test_app.py

  Python-Static-Analysis:
    name: Python Static Analysis 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Check Python version 
        run: |
          python3 --version
          pip --version
      - name: Pylint 
        run: |
          python3 -m pip install pylint
          pylint $GITHUB_WORKSPACE/application/*.py
        continue-on-error: true
      - name: Prospector
        run: | 
          echo "Documentation: https://prospector.landscape.io/en/master/index.html"
          python3 -m pip install prospector
          cd $GITHUB_WORKSPACE/application/ && prospector
        continue-on-error: true
      - name: Bandit 
        run: |
          echo "Documentation: https://bandit.readthedocs.io/en/latest/"
          python3 -m pip install bandit
          cd $GITHUB_WORKSPACE/application/ && bandit -r .
        continue-on-error: true

  Docker-Vulnerability-Testing:
    name: Docker Vulnerability Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Dockerfile Lint(Hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with: 
          dockerfile: application/Dockerfile
        continue-on-error: true
      - name: Build a Docker image for Snyk testing
        run: | 
          cd application/ 
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
      - name: Run Snyk to check Docker image for vulnerabilities
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: flaskapp:latest
          args: --file=$GITHUB_WORKSPACE/application/Dockerfile
      - name: Checkov scanning 
        continue-on-error: true
        run: |
          pip install checkov
          checkov -v 
          checkov -d $GITHUB_WORKSPACE/application/ --framework dockerfile

  Docker-Build-And-Push:
    name: Docker Build And Push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - Application-Unit-Testing
      - Python-Static-Analysis
      - Docker-Vulnerability-Testing
    env: 
      DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Specify Python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Generate image tag
        id: set-tag 
        run: |
          sha=${GITHUB_SHA::8}
          echo "IMAGE_ID=${sha}" >> $GITHUB_ENV
      - name: Build Docker image to deploy
        run: |
          cd $GITHUB_WORKSPACE/application/
          docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_ID }} . 
      - name: Push Docker image to DockerHub
        run: |
          docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD}}
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_ID }}
          echo "DOCKER_IMAGE=${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.IMAGE_ID }}" >> $GITHUB_ENV
      - name: Open Docker Build/Push Issue 
        if: failure() && github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.sha }}",
            "body": "This issue was automatically created by the Github Action workflow **${{ github.workflow }}**. \n\n The commit has was: _${{ github.sha }}_.",
            "assignees": ["${{ github.event.pull_request.user.login }}"]
          }'

  Deployment-Approval:
    name: Application Deployment Approval 
    runs-on: ubuntu-latest 
    needs:
      - Docker-Build-And-Push
    steps:
      - name: Deployment Approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ env.TOKEN }}
          approvers: AbheethaIshanRangana
        env:
          TOKEN: ${{ secrets.GH_TOKEN }}

  Application-Deployment:
    name: Application Deployment 
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest 
    needs: 
      - Deployment-Approval
    steps:
      - name: Deployment 
        run: |
          echo "Application Deployment"
      - name: Render Amazon ECS task definition
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
        task-definition: $GITHUB_WORKSPACE/application/task-definition.json
        container-name: flask-app
        image: ${{ env.DOCKER_IMAGE }}
        environment-variables: "LOG_LEVEL=info"
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}